import{_ as s,c as a,a as e,o as t}from"./app-DEZf6KcN.js";const o={};function c(p,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h1><p>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型，但有时也需要我们手动进行类型的转换。</p><blockquote><p>⚠️ <strong>对象还未纳入讨论中</strong></p><p>目前，我们仅讨论原始类型之间的转换，不包括 object。对于对象类型的转换我们会在后续的内容中进行讨论。</p></blockquote><h2 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换"><span>字符串转换</span></a></h2><p>当我们需要一个字符串形式的值时，就会进行字符串转换（自动）。比如，当我们调用 <code>alert()</code> 函数的时候，此时该函数期望得到一个字符串值，JS 就会进行自动转换，将参数值转换为一个字符串，然后显示这个值。</p><p>我们可以显式的调用 <code>String(value)</code> 函数来讲 <code>value</code> 转换为字符串类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span></span>
<span class="line"></span>
<span class="line">value <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在，值是一个字符串形式的 &quot;true&quot;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串转换较为简单，比如在上面的案例中，<code>false</code> 会转换为 <code>&#39;false&#39;</code>。</p><h2 id="数字型转换" tabindex="-1"><a class="header-anchor" href="#数字型转换"><span>数字型转换</span></a></h2><p>在算数函数和表达式中，会自动进行 <code>number</code> 类型转换。</p><p>比如，当把除法 <code>/</code> 用于非 <code>number</code> 类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;6&quot;</span> <span class="token operator">/</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, string 类型的值被自动转换成 number 类型后进行计算</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们也可以使用 <code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 <code>number</code> 类型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 变成 number 类型 123</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// number</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>值得注意的是，如果该字符串不是一个有效的数字，转换的结果会是 <code>NaN</code>。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;an arbitrary string instead of a number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN，转换失败</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="number-类型转换规则" tabindex="-1"><a class="header-anchor" href="#number-类型转换规则"><span><strong>number 类型转换规则</strong></span></a></h3><table><thead><tr><th>值</th><th>变成</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>0</code></td></tr><tr><td><code>true</code> 和 <code>false</code></td><td><code>1</code> and <code>0</code></td></tr><tr><td><code>string</code></td><td>去掉首尾空白字符（空格、换行符<code>\\n</code>、制表符<code>\\t</code>等）后的纯数字字符串中含有的数字。例如 <code>123 </code> 转换为数字123。 如果去除后字符串为空字符串，则结果是 0 ，否则从去除后字符串中“读取”数字。当类型转换出现error时返回<code>NaN</code>。例如：<code>123A</code>，其中 A 无法被转换为数字，此时返回 <code>NaN</code></td></tr></tbody></table><h2 id="布尔型转换" tabindex="-1"><a class="header-anchor" href="#布尔型转换"><span>布尔型转换</span></a></h2><p>布尔 （Boolean） 类型转换是最简单的一个。</p><p>转换规则如下：</p><ul><li>直观上为&quot;空&quot;的值 （如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>）将变成 <code>false</code>。</li><li>其他值变成 <code>true</code></li></ul><p>布尔值的转换发生在需要布尔值的地方，例如使用 <code>if(&quot;123&quot;)</code> 语句时，其中的值会被自动转换为布尔值。</p><p>我们可以显式的使用 <code>Boolean(Value)</code> 来进行将 <code>value</code> 转换为布尔值。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>⚠️ <strong>请注意：包含 0 的字符串 <code>&quot;0&quot;</code> 是 <code>true</code>，任何非空字符串也是 <code>true</code></strong> 一些编程语言 （比如 PHP ）视 <code>&quot;0&quot;</code> 为 <code>false</code>。 但在JavaScript中，非空的字符串总是<code>true</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空格，也是 true（任何非空字符串都是 true）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>有三种常用的类型转换：转换为 String 类型、转换为 Number 类型和转换为 Boolean 类型。</p><ul><li>字符串转换：通常发生在输出内容时，也可以通过 <code>String(value)</code> 进行显式转换。原始类型例如 <code>null</code> 、<code>undefined</code> 的转换通常很直观，转换为<code>&#39;null&#39;</code>、<code>&#39;undefined&#39;</code>。</li><li>数字型转换：转换发生在进行算数操作时，也可以通过 <code>Number(value)</code> 进行显式转换。转换规则我们在上面进行了讨论。</li><li>布尔值转换：转换发生在进行逻辑操作时，例如 <code>if</code> 语句中。也可以通过 <code>Boolean(value)</code> 进行显式转换。同样的我们在上面对其转换规则进行了讨论。需要注意的是 <code>&#39;0&#39;</code>和只有空格的字符串（不是空字符串<code>&#39;&#39;</code>，是只包含空格的字符串）进行布尔值转换时输出的结果时<code>true</code>。</li></ul>`,29)]))}const i=s(o,[["render",c],["__file","06-leixingzhuanhuan.html.vue"]]),u=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/06-leixingzhuanhuan.html","title":"类型转换","lang":"zh-CN","frontmatter":{"title":"类型转换","date":"2025-02-02 21:26"},"headers":[{"level":2,"title":"字符串转换","slug":"字符串转换","link":"#字符串转换","children":[]},{"level":2,"title":"数字型转换","slug":"数字型转换","link":"#数字型转换","children":[{"level":3,"title":"number 类型转换规则","slug":"number-类型转换规则","link":"#number-类型转换规则","children":[]}]},{"level":2,"title":"布尔型转换","slug":"布尔型转换","link":"#布尔型转换","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/06-类型转换.md"}');export{i as comp,u as data};
