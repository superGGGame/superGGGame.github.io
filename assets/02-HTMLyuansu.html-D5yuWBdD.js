import{_ as t,c as n,a,o as e}from"./app-DEZf6KcN.js";const p="/assets/HTML%E5%85%83%E7%B4%A0%E6%BC%94%E7%A4%BA-1-BHnnn_p1.png",l="/assets/HTML%E5%85%83%E7%B4%A0%E6%BC%94%E7%A4%BA-2-kx4GdQL2.png",o={};function c(d,s){return e(),n("div",null,s[0]||(s[0]=[a(`<h1 id="元素" tabindex="-1"><a class="header-anchor" href="#元素"><span>元素</span></a></h1><p>一个 HTML 文档是由 HTML 元素所定义的，而一个 HTML 元素指的是从开始标签（start tag）到结束标签（end tag）的所有代码。</p><h2 id="元素结构" tabindex="-1"><a class="header-anchor" href="#元素结构"><span>元素结构</span></a></h2><p>元素结构案例：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token comment">&lt;!-- 一个 HTML 元素 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Hello World ！！！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，由三个部分组成了一个 HTML 元素，让我们来仔细解析它：</p><ul><li><code>&lt;p&gt;</code>：开始标签，它表示了一个元素的开始</li><li><code>Hello World ！！！</code>：这是一段文本，他被包裹在开始标签和结束标签之中，这是元素的内容，但是你需要知道，元素的内容不一定是文本，它可以是另一个元素。</li><li><code>&lt;/p&gt;</code>：结束标签，它表示了一个元素的结束</li></ul><blockquote><p>:information: 标签 在上面的例子中，我们看到了 <code>&lt;p&gt;</code> 这个标签，在 HTML 中，表示是元素的组成部分，每一种标签的语法都是 <code>&lt;标签类型&gt;</code> ，而结束标签的语法则是 <code>&lt;/标签类型&gt;</code> 。在这里无需纠结 <code>&lt;p&gt;</code> 的作用，它只是为了演示元素结构，我们很快会在后续的内容讨论它。 在某些时候，你可能期望得到一个没有内容的标签，此时你可以这样声明一个元素 <code>&lt;标签类型/&gt;</code>，这称作<strong>单标签</strong>。如果你的元素并不需要内容，那么我很推荐你使用单标签。</p></blockquote><h2 id="元素属性" tabindex="-1"><a class="header-anchor" href="#元素属性"><span>元素属性</span></a></h2><p>每个元素都具有它们自己的 <strong>属性（attribute）</strong> ，它可以赋予元素一些特殊的能力。</p><p>举个例子：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>image.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>定义属性的语法：<br><code>&lt;标签名称 属性名=&#39;属性值&#39;&gt;</code></p><p>在上面这个例子，我们为 <code>&lt;img&gt;</code> 标签添加了 <code>src</code>属性，他会根据这个属性的值来作为图片的文件路径来进行图片查找，并展示在页面上。</p><blockquote><p>⚠️ 单引号双引号 在上面的例子中，我们在案例中给予属性值的时候是双引号，但是在语法中使用了双引号，这是因为 HTML 并不区分单双引号，也就是说，对于 HTML 来说它们是同一个东西。但是你不能混合使用它们，比如使用单引号开头，双引号结尾是做不到的。</p></blockquote><blockquote><p>ℹ️ HTML不区分大小写</p><p>需要注意的点是，在 HTML 中是不区分大小写的，这也就意味着，我们书写 <code>&lt;ImG&gt;</code> 来尝试创建一个元素，它等同于 <code>&lt;img&gt;</code>。创建元素属性的时候也是同样的情况，并不会因为你书写的元素名大小写不同，而去区别对待，因为对 HTML 来说，它们是一样的。</p></blockquote><h2 id="块级元素和行内元素" tabindex="-1"><a class="header-anchor" href="#块级元素和行内元素"><span>块级元素和行内元素</span></a></h2><p>现在我们已经认识了元素和元素的属性，那么让我们来认识一下 HTML 中元素的几种类型。</p><p>首先给出一个例子：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 我是块级元素1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 我是块级元素2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 我是行内元素1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 我是行内元素2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，元素 <code>div</code> 是一个块级元素，而 <code>span</code> 是一个行内元素。如果你是初学者，现在可能并不理解这些名词的含义，你可以创建一个记事本文件，将案例中的内容输入到记事本中。如下所示：</p><p><img src="`+p+'" alt="演示1"></p><p>保存后关闭，通过浏览器打开，效果如下：</p><p><img src="'+l+`" alt="演示2"></p><p>可以看到 <code>div</code> 声明的元素始终独立占有一行，而 <code>span</code> 声明的元素则像我们书写的文字一样，在一行内进行展示。这就是块级元素和行内块的区别。通过这个特点，我们能很快的确定一个元素到底是什么类型，如果它始终占一行，那么它就是块级元素，如果它像文字一样一行内可以多个元素存在，那么它是行内块元素。</p><blockquote><p>ℹ️ 行内元素有时也被称作内联元素，这两个名称指的是同一个东西。</p></blockquote><blockquote><p>⚠️ 为了本教程完整性，下面将讨论不同元素分类的具体特点，如果你是初学者，那么我建议你暂时跳过这一部分，当你在学习 CSS 的时候回顾这一部分即可。</p></blockquote><h2 id="元素类型和行为" tabindex="-1"><a class="header-anchor" href="#元素类型和行为"><span>元素类型和行为</span></a></h2><p>我们已经讨论完了行内元素和块级元素的区别，现在让我们比较一下它们的区别。</p><table><thead><tr><th><strong>元素模式</strong></th><th><strong>元素排列</strong></th><th><strong>设置样式</strong></th><th><strong>默认宽度</strong></th><th><strong>包含</strong></th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含的任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr></tbody></table><p>上面给出了一个块级元素和行内元素的比较，我们已经认识了二者的元素排列特点，同时我们也可以根据一个元素的排列特点来判断这个元素的类型。</p><p>块级元素和行内块最大的区别，其实表现在 CSS 中，块级元素可以使用 CSS 来设置宽度高度，它在可调控方面表现更佳，它的默认宽度就是容器的 100% ，而行内元素则无法被设置宽度高度，并且默认宽度就是其内容的宽度，换句话来说，它的宽是被内容撑开的</p><p>我们知道，元素是可以包含元素的，就像本节上面元素讨论的那样，在包含元素方面，块级元素是可以包含任何类型的标签的，不管是行内还是块级或者是其他。而相对来说行内元素的容纳能力较差，它只能包含文本和其他行内元素。</p><h2 id="行内块元素" tabindex="-1"><a class="header-anchor" href="#行内块元素"><span>行内块元素</span></a></h2><p>通过上面的比较，我们不难发现，块级元素在可调控和容纳上的表现要比行内元素要更好。</p><p>但是在一些场景中，我们可能会需要能够插入文本，并且可以设置宽高，易于控制的元素。所以出现了行内块元素，我们可以将一个元素的 CSS 属性 <code>display</code> 设置为 <code>inline-block</code> 来使得一个元素成为行内块元素。</p><p>例如：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">display</span><span class="token punctuation">:</span>inline-block</span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    我成为了一个行内块元素</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的案例中，我们设置了一个 <code>div</code> 标签的样式属性，将其 <code>display</code> 设置为 <code>inline-block</code> ，这使它成为了一个行内块元素。</p><p>现在，让我们进一步对比块级元素，行内元素，行内块元素三种的行为区别：</p><table><thead><tr><th><strong>元素模式</strong></th><th><strong>元素排列</strong></th><th><strong>设置样式</strong></th><th><strong>默认宽度</strong></th><th><strong>包含</strong></th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度高度</td><td>容器的100%</td><td>容器级可以包含的任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以设置宽度高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行可以放多个行内块元素</td><td>可以设置宽度高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><blockquote><p>⚠️ 请注意</p><p>只有很少一部分元素是默认行内块行为的，它们有自己特殊的规则。当我们使用改变元素 <code>block</code> 使其成为行内块元素的时候，它所能容纳的元素仍然是其原来的元素模式所允许包含的类型。</p></blockquote><p>元素：元素语法，元素属性（不区分大小写特性），块级元素，内联（行内）元素，内联（行内）块元素</p>`,43)]))}const r=t(o,[["render",c],["__file","02-HTMLyuansu.html.vue"]]),u=JSON.parse('{"path":"/series/HTML/01-jichugainianyujianjie/02-HTMLyuansu.html","title":"HTML元素","lang":"zh-CN","frontmatter":{"title":"HTML元素","date":"2025-2-21 22:21"},"headers":[{"level":2,"title":"元素结构","slug":"元素结构","link":"#元素结构","children":[]},{"level":2,"title":"元素属性","slug":"元素属性","link":"#元素属性","children":[]},{"level":2,"title":"块级元素和行内元素","slug":"块级元素和行内元素","link":"#块级元素和行内元素","children":[]},{"level":2,"title":"元素类型和行为","slug":"元素类型和行为","link":"#元素类型和行为","children":[]},{"level":2,"title":"行内块元素","slug":"行内块元素","link":"#行内块元素","children":[]}],"git":{},"filePathRelative":"series/HTML/01-基础概念与简介/02-HTML元素.md"}');export{r as comp,u as data};
