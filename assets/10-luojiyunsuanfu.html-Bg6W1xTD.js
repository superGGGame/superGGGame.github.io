import{_ as n,c as a,a as e,o as p}from"./app-DEZf6KcN.js";const t={};function o(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h1><p>JavaScript 中有四个逻辑运算符：<code>||</code> （或），<code>&amp;&amp;</code> (与) ，<code>!</code> （非），<code>??</code> （空值合并运算符）。在这一节我们先对前三个进行讨论。</p><p>虽然它们被称为 ”逻辑“ 运算符，但这些运算符实际上可以被应用于任意类型的值，而不仅仅是布尔值。它们的结果也同样可以是任意类型。</p><h2 id="或" tabindex="-1"><a class="header-anchor" href="#或"><span>|| （或）</span></a></h2><p>两个竖线符号 <code>||</code> 表示或运算符：<code>result = a || b</code></p><p>在传统的编程中，逻辑或仅能操作布尔值。如果参加运算的任何一个参数为 <code>true</code> ，返回的结果就为 <code>true</code> ，否则返回 <code>false</code>。<br> 就像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果操作数不是布尔值，那么它将会被转化为布尔值来参与运算。例如，数字 <code>1</code> 被作为 <code>true</code> 处理，数字 <code>0</code> 被作为 <code>false</code>处理。具体的转换请参照前文中的类型转换小节。例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 工作原理相当于 if( true || false )</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;truthy!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像上面的例子一样，多数情况下，逻辑或用在 <code>if</code> 语句中，用来测试是否有<strong>任何</strong>给定的条件为 <code>true</code> 。它可以用传入任意多的条件：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> hour <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> isWeekend <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">||</span> hour <span class="token operator">&gt;</span> <span class="token number">18</span> <span class="token operator">||</span> isWeekend<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;The office is closed.&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是周末</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="或运算寻找第一个真值" tabindex="-1"><a class="header-anchor" href="#或运算寻找第一个真值"><span>或运算寻找第一个真值</span></a></h2><p>上面是或运算的传统使用，而在 JavaScript 中它呈现出了一些”特性“。</p><p>给定多个参与或运算的值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> value1 <span class="token operator">||</span> value2 <span class="token operator">||</span> value3<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在上面这段代码， <code>||</code> 或运算做了如下的事情：</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止自诉案，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code> ），则返回最后一个操作数。</li></ul><p>返回的值是操作数的初始形式，不会做布尔转换。</p><p>和传统的运算行为相比，这种运算规则引起了一些很有趣的用法。</p><ol><li>获取变量列表或表达式中的第一个真值<br> 使用 <code>||</code> 运算符来选择有数据的值。<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> nickName <span class="token operator">=</span> <span class="token string">&quot;SuperCoder&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> firstName <span class="token operator">||</span> lastName <span class="token operator">||</span> nickName <span class="token operator">||</span> <span class="token string">&quot;Anonymous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SuperCoder</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>如果所有变量的值都为假，结果就会是最后的字符串： <code>&quot;Anonymous&quot;</code>。</li><li>短路求值<br><code>||</code> 是一个短路运算符，即当该运算符自左向右执行过程中，如果遇到了 <code>true</code> 结果，意味着后续的内容不会被执行。<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;not printed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;printed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>在上面这个例子可以很清楚的看到他的短路性质，只有第二行的 <code>alert</code> 会执行，第一行的代码执行到 <code>true</code> 的时候就停止执行，所以 <code>alert</code> 不会被触发。</li></ol><h2 id="与" tabindex="-1"><a class="header-anchor" href="#与"><span>&amp;&amp;（与）</span></a></h2><p>两个<code>&amp;</code>符号表示 <code>&amp;&amp;</code> 与运算符： <code>result = a &amp;&amp; b</code></p><p>在传统的编程中，当两个操作数都是真值时，与运算返回 <code>true</code> ，否则返回 <code>false</code> ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// false</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和或运算一样，与运算的操作数可以是任意类型的值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 作为 true &amp;&amp; false 来执行</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;won&#39;t work, because the result is falsy&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与运算寻找第一个假值" tabindex="-1"><a class="header-anchor" href="#与运算寻找第一个假值"><span>与运算寻找第一个假值</span></a></h2><p>给出多个参加与运算的值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> value1 <span class="token operator">&amp;&amp;</span> value2 <span class="token operator">&amp;&amp;</span> value3<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>与运算 <code>&amp;&amp;</code> 做了如下的事：</p><ul><li>从左到右依次计算操作数。</li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>false</code>，就停止计算，并返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（例如全是真值），则返回最后一个操作数。</li></ul><p>换句话来说，与运算返回第一个假值，如果没有假值就返回最后一个值。</p><blockquote><p>ℹ️ 与运算 <code>&amp;&amp;</code> 在或运算 <code>||</code> 之前进行<br> 与运算 <code>&amp;&amp;</code> 的优先级比或运算 <code>||</code> 要高。<br> 所以代码 <code>a &amp;&amp; b || c &amp;&amp; d</code> 跟 <code>&amp;&amp;</code> 表达式加了括号完全一样： <code>(a &amp;&amp; b) || (c &amp;&amp; d)</code>。</p></blockquote><blockquote><p>⚠️ 不要用 <code>||</code> 或 <code>&amp;&amp;</code> 来取代 <code>if</code><br> 有时候，有人会将运算符 <code>&amp;&amp;</code> 作为“简化 <code>if</code>”的一种方式。<br> 例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Greater than zero!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子基本等同于：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Greater than zero!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然使用 <code>&amp;&amp;</code> 写出的变体看起来更短，但 <code>if</code> 更明显，并且往往更具可读性。因此，我们建议根据每个语法结构的用途来使用：如果我们想要条件判定执行代码，那么使用 <code>if</code> 。如果我们想让条件之间逻辑与，就使用 <code>&amp;&amp;</code>。</p></blockquote><h2 id="非" tabindex="-1"><a class="header-anchor" href="#非"><span>！（非）</span></a></h2><p>感叹符号 <code>!</code> 表示布尔非运算符。</p><p>语法相当简单：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">result <span class="token operator">=</span> <span class="token operator">!</span>value<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>逻辑非运算符接受一个参数，并按如下运作：</p><ol><li>将操作数转化为布尔类型： <code>true/false</code>。</li><li>返回相反的值。</li></ol><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token boolean">true</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot;non-empty string&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这和使用 <code>Boolean()</code> 函数进行转换效果类似。但一般出于可读性考虑，建议使用函数进行转换。</p><p>非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp;</code> 和 <code>||</code> 之前执行。</p>`,46)]))}const i=n(t,[["render",o],["__file","10-luojiyunsuanfu.html.vue"]]),r=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/10-luojiyunsuanfu.html","title":"逻辑运算符","lang":"zh-CN","frontmatter":{"title":"逻辑运算符","date":"2025-02-04 16:25"},"headers":[{"level":2,"title":"|| （或）","slug":"或","link":"#或","children":[]},{"level":2,"title":"或运算寻找第一个真值","slug":"或运算寻找第一个真值","link":"#或运算寻找第一个真值","children":[]},{"level":2,"title":"&&（与）","slug":"与","link":"#与","children":[]},{"level":2,"title":"与运算寻找第一个假值","slug":"与运算寻找第一个假值","link":"#与运算寻找第一个假值","children":[]},{"level":2,"title":"！（非）","slug":"非","link":"#非","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/10-逻辑运算符.md"}');export{i as comp,r as data};
