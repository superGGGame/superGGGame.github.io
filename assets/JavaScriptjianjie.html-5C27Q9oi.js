import{_ as i,c as p,b as t,f as e,d as l,a as n,o as s,r as o}from"./app-DEZf6KcN.js";const v={},c={href:"https://baike.baidu.com/item/ECMAScript",target:"_blank",rel:"noopener noreferrer"};function d(S,a){const r=o("ExternalLinkIcon");return s(),p("div",null,[a[5]||(a[5]=t("h1",{id:"javascript简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#javascript简介"},[t("span",null,"JavaScript简介")])],-1)),a[6]||(a[6]=t("p",null,"JavaScript 是一种轻量级、解释型的编程语言，主要用于为网页添加交互功能，现已成为现代全栈开发（前端 + 后端）的核心语言。",-1)),a[7]||(a[7]=t("p",null,[t("em",null,"JavaScript"),e(" 最初被创建的目的是“使网页更生动”。 JavaScript 程序也被称为脚本。")],-1)),t("blockquote",null,[t("p",null,[a[1]||(a[1]=t("strong",null,"为什么叫JavaScript？",-1)),a[2]||(a[2]=t("br",null,null,-1)),a[3]||(a[3]=e(" JavaScript 在刚诞生的时候，它的名字叫 “LiveScript” 。但是因为当时 Java 十分流行，当时认为将这门语言定义为 Java 的弟弟会有助于它的流行。 现代 JS 一位完全发展成为了一门独立的语言，拥有自己的语言规范 ")),t("a",c,[a[0]||(a[0]=e("ECMAScript")),l(r)]),a[4]||(a[4]=e("。它和 Java 没有任何关系。"))])]),a[8]||(a[8]=n('<h2 id="javascript-能做什么" tabindex="-1"><a class="header-anchor" href="#javascript-能做什么"><span>JavaScript 能做什么？</span></a></h2><p>JavaScript 的能力很大程度上取决于它运行的环境。例如 Node.js 支持允许 JavaScript 读取/写入任意文件，执行网络请求等的函数。</p><p>浏览器中的 JavaScript 可以做与网页操作、用户交互和Web服务器相关的事情。</p><p>当你疑惑某一个功能在 JS 中能否实现的时候，要记得考虑你的脚本运行环境。</p><h2 id="javascript-的-上层-语言" tabindex="-1"><a class="header-anchor" href="#javascript-的-上层-语言"><span>JavaScript 的“上层”语言</span></a></h2><p>JavaScript的语法并不能满足所有人的需求，这很正常，因为每个人的项目和具体需求是不一样的。因此，也出现了很多新语言，这些语言在执行之前都会被<strong>编译</strong>（转化）成 JavaScript 。</p><p>这类语言有很多，比如由微软开发的 TypeScript 。</p><h2 id="特点介绍" tabindex="-1"><a class="header-anchor" href="#特点介绍"><span>特点介绍</span></a></h2><h3 id="解释型语言" tabindex="-1"><a class="header-anchor" href="#解释型语言"><span>解释型语言</span></a></h3><p>计算机语言按照执行方式可以分为编译型与解释型，所谓编译型语言是程序执行前将源文件编译成机器语言文件，执行时候直接执行机器语言文件。 而解释型语言只在运行程序的时候才由解释器翻译，即解释一条执行一条，不存在编译过程。</p><p>对于解释型语言来说，编译后的程序在执行速度上是有明显的优势的，但是由于不同的平台机器语言之间存在区别，因此一次编译并不能通用，对于不同平台需要进行不同的编译，在跨平台性上没有很好的表现。而相对来说，解释型语言由于是在执行时由解释器对程序进行逐句解释，因此不需要进行额外的工作。</p><p>JavaScript的解释器也称作JS引擎，比如Chrome浏览器的V8引擎，Edge浏览器的Chakra引擎(不过现在Edge已经转用了V8引擎)，以及Firefox中的SpiderMonkey。</p><h3 id="js-引擎的如何工作" tabindex="-1"><a class="header-anchor" href="#js-引擎的如何工作"><span>JS 引擎的如何工作</span></a></h3><p>引擎很复杂，但是基本原理很简单。</p><ol><li>引擎（如果是浏览器，则引擎被嵌入在其中）解析脚本。</li><li>然后，引擎将脚本转换（“编译”’）为机器语言。</li><li>然后，机器代码快速地执行。</li></ol><p>引擎会根据流程中的每个阶段都进行优化。它甚至可以在编译的脚本运行时监视它，分析流经该脚本的数据，并根据获得的信息进一步优化机器代码。</p>',16))])}const h=i(v,[["render",d],["__file","JavaScriptjianjie.html.vue"]]),j=JSON.parse('{"path":"/series/JavaScript/00-jianjie/JavaScriptjianjie.html","title":"JavaScript简介","lang":"zh-CN","frontmatter":{"title":"JavaScript简介","date":"2025-01-31 18:46"},"headers":[{"level":2,"title":"JavaScript 能做什么？","slug":"javascript-能做什么","link":"#javascript-能做什么","children":[]},{"level":2,"title":"JavaScript 的“上层”语言","slug":"javascript-的-上层-语言","link":"#javascript-的-上层-语言","children":[]},{"level":2,"title":"特点介绍","slug":"特点介绍","link":"#特点介绍","children":[{"level":3,"title":"解释型语言","slug":"解释型语言","link":"#解释型语言","children":[]},{"level":3,"title":"JS 引擎的如何工作","slug":"js-引擎的如何工作","link":"#js-引擎的如何工作","children":[]}]}],"git":{},"filePathRelative":"series/JavaScript/00-简介/JavaScript简介.md"}');export{h as comp,j as data};
