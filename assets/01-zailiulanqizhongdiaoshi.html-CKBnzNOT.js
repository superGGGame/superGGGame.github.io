import{_ as s,c as n,a,o}from"./app-DEZf6KcN.js";const t="/assets/01-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%B0%83%E8%AF%95%E5%9B%BE1-DvarYPnd.png",i="/assets/01-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%B0%83%E8%AF%95%E5%9B%BE2-DDudd8h3.png",l="/assets/01-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%B0%83%E8%AF%95%E5%9B%BE3-D9e2jvLy.png",p="/assets/01-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%B0%83%E8%AF%95%E5%9B%BE4-BUAlW55h.png",c={};function d(r,e){return o(),n("div",null,e[0]||(e[0]=[a('<h1 id="在浏览器中调试" tabindex="-1"><a class="header-anchor" href="#在浏览器中调试"><span>在浏览器中调试</span></a></h1><p><em>调试</em> 是指在一个脚本中找出并修复错误的过程。所有现代浏览器和大多数其他环境都支持开发者工具，它是一个令调试更加容易地特殊用户界面。</p><p>**在浏览器中，你可以使用 <code>F12</code> 键或 <code>Ctrl+Shift+i</code> 来打开控制台。（Mac：<code>Cmd+Opt+I</code>）</p><h2 id="资源-sources-面板" tabindex="-1"><a class="header-anchor" href="#资源-sources-面板"><span>“资源（Sources）” 面板</span></a></h2><p><img src="'+t+'" alt="浏览器调试-1"></p><p>资源（Sources）面板包含三个部分：</p><ol><li><strong>文件导航（File Navigator）</strong> 区域列出了 HTML、JavaScript、CSS 和包括图片在内的其他依附于此页面的文件。Chrome扩展程序也会显示在这。</li><li><strong>代码编辑（Code Editor）</strong> 区域展示源码。</li><li><strong>JavaScript调试 （JavaScript Debugging）</strong> 区域是用于调试的。</li></ol><h2 id="控制台-console" tabindex="-1"><a class="header-anchor" href="#控制台-console"><span>控制台（Console）</span></a></h2><p>如果我们在 Sources 按下 <code>Esc</code> 下面会出现一个控制台，我们可以输入一些命令然后按下 <code>Enter</code> 来执行。</p><p>语句执行完毕后，其执行结果会显示在下面。</p><p>例如，<code>1+2</code> 将会返回 <code>3</code>，而<code>(() =&gt; {})()</code> 函数会返回 <code>undefined</code>。这里用了一个立即执行函数技巧，使用 <code>()</code> 包裹函数，然后直接调用。</p><p><img src="'+i+'" alt="浏览器调试-2"></p><h2 id="断点-breakpoints" tabindex="-1"><a class="header-anchor" href="#断点-breakpoints"><span>断点（Breakpoints）</span></a></h2><p>添加断点的方式有两种，第一种在开发者控制台如下所示页面，点击代码行对应的左侧数字编号，当数字背景改变，则该位置已经被添加了断点。</p><p><img src="'+l+`" alt="浏览器调试-3"></p><p>断点是调试器会自动暂停 JavaScript 执行的地方。</p><p>当代码被暂停时，我们可以检查当前的变量，在控制台执行命令等。换句话说，我们可以调试它。</p><p>我们总是可以在右侧面板中找到断点的列表。当我们在数个文件中有许多断点时，这是非常有用的。它允许我们：</p><ul><li>快速跳转至代码中的断点（通过点击右侧面板中的对应的断点）。</li><li>通过取消选中断点来临时禁用对应的断点。</li><li>通过右键单击并选择移除来删除一个断点。</li><li>……等等</li></ul><blockquote><p>ℹ️ 条件断点</p><p>在行号上 <strong>右键单击</strong> 允许你创建一个 <strong>条件</strong> 断点。只有当给定的表达式（你创建条件断点时提供的表达式）为真时才会被触发。</p><p>当我们需要在特定的变量值或参数的情况下暂停程序执行时，这种调试方法就很有用了。</p></blockquote><h2 id="debugger-命令" tabindex="-1"><a class="header-anchor" href="#debugger-命令"><span>“debugger” 命令</span></a></h2><p>我们也可以使用 <code>debugger</code> 命令来暂停代码，像这样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> phrase <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">debugger</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;-- 调试器会在这停止</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">say</span><span class="token punctuation">(</span>phrase<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是创建断点的第二种方法，需要注意，只有在打开开发者控制台的时候它才有效，否则浏览器会忽略它。</p><h2 id="暂停并查看" tabindex="-1"><a class="header-anchor" href="#暂停并查看"><span>暂停并查看</span></a></h2><p>在我们的例子中，<code>hello()</code> 函数在页面加载期间被调用，因此激活调试器的最简单的方法（在我们已经设置了断点后）就是 —— 重新加载页面。因此让我们按下 <code>F5</code> （Windows，Linux）或 <code>Cmd+R</code> (Mac) 吧。</p><p><img src="`+p+'" alt="浏览器调试-4"></p><p>在右侧的信息下拉列表中，其中：</p><ol><li><code>查看（Watch）</code> —— <strong>显示任意表达式的当前值</strong>。<br> 你可以点击加号 <code>+</code> 然后输入一个表达式。调试器将显示它的值，并在执行过程中自动重新计算该表达式。</li><li><code>调用栈（Call Stack）</code> —— <strong>显示嵌套的调用链。</strong> 你可以通过点击调用链的任意一环跳转到对应的代码位置。</li><li><code>作用域（Scope）</code> —— 显示当前作用域的变量。 <code>Local</code> 显示当前函数中的变量，你还可以看到在源代码中它们的值高亮显示了出来。 <code>Global</code> 显示全局变量（不再任何函数中）。 <code>this</code> 描述当前的 <code>this</code> 指向。（在后续我们会进行详细讨论）</li></ol><h2 id="跟踪执行" tabindex="-1"><a class="header-anchor" href="#跟踪执行"><span>跟踪执行</span></a></h2><p>在了解了上述内容之后，来介绍一下跟踪执行有关的快捷键：</p><ul><li>“恢复（Resume）”：继续执行，快捷键 <code>F8</code> 继续执行。如果没有其他的断点，那么程序就会继续执行，并且调试器不会再控制程序。</li><li>“下一步（Step）”：运行下一条（即当前行）指令，快捷键 <code>F9</code>。 运行下一条语句。一次接一次地点击此按钮，整个脚本地所有语句会被逐个执行。</li><li>“跨步（Step over）”：运行下一条（即当前行）指令，但 不会进入到一个函数中，快捷键 <code>F10</code>。 和下一步指令类型，但是如果下一条指令是函数，那么下一步会进入函数内部，而跨步不会进入函数内部，而是直接运行完函数，指向当前层级的下一条指令。</li><li>“步入（Step into）”，快捷键 <code>F11</code>。 “下一步（Step）”命令会忽略异步行为，例如 setTimeout（计划的函数调用），它会过一段时间再执行。而“步入（Step into）”会进入到代码中并等待（如果需要）。</li><li>“步出（Step out）”：继续执行到当前函数的末尾，快捷键 <code>Shift+F11</code>。 继续执行当前函数内的剩余代码，并暂停在调用当前函数的下一行代码处。</li></ul>',32)]))}const h=s(c,[["render",d],["__file","01-zailiulanqizhongdiaoshi.html.vue"]]),g=JSON.parse('{"path":"/series/JavaScript/02-daimazhiliang/01-zailiulanqizhongdiaoshi.html","title":"在浏览器中调试","lang":"zh-CN","frontmatter":{"title":"在浏览器中调试","date":"2025-02-20 15:34"},"headers":[{"level":2,"title":"“资源（Sources）” 面板","slug":"资源-sources-面板","link":"#资源-sources-面板","children":[]},{"level":2,"title":"控制台（Console）","slug":"控制台-console","link":"#控制台-console","children":[]},{"level":2,"title":"断点（Breakpoints）","slug":"断点-breakpoints","link":"#断点-breakpoints","children":[]},{"level":2,"title":"“debugger” 命令","slug":"debugger-命令","link":"#debugger-命令","children":[]},{"level":2,"title":"暂停并查看","slug":"暂停并查看","link":"#暂停并查看","children":[]},{"level":2,"title":"跟踪执行","slug":"跟踪执行","link":"#跟踪执行","children":[]}],"git":{},"filePathRelative":"series/JavaScript/02-代码质量/01-在浏览器中调试.md"}');export{h as comp,g as data};
