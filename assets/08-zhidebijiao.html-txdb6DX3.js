import{_ as s,c as a,a as e,o as t}from"./app-DEZf6KcN.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="值的比较" tabindex="-1"><a class="header-anchor" href="#值的比较"><span>值的比较</span></a></h1><p>在 JS 中进行值的比较编写方式如下：</p><ul><li>大于 / 小于：<code>a &gt; b</code>，<code>a &lt; b</code>。</li><li>大于等于 / 小于等于：<code>a &gt;= b</code>，<code>a &lt;= b</code>。</li><li>检查两个值的相等：<code>a == b</code>，请注意双等号 <code>==</code> 才表示相等性检查，而不是像数学中 <code>=</code>。</li><li>检查两个值不相等：<code>a != b</code>。</li></ul><h2 id="比较结果为-boolean-类型" tabindex="-1"><a class="header-anchor" href="#比较结果为-boolean-类型"><span>比较结果为 Boolean 类型</span></a></h2><p>所有比较运算符均返回布尔值：</p><ul><li><code>true</code> —— 表示“yes（是）”，“correct（正确）”或“the truth（真）”。</li><li><code>false</code> —— 表示“no（否）”，“wrong（错误）”或“not the truth（非真）”。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true（正确）</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false（错误）</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true（正确）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 JS 中数字的比较和在数学比较一致。</p><h2 id="字符串比较" tabindex="-1"><a class="header-anchor" href="#字符串比较"><span>字符串比较</span></a></h2><p>在 JS 中，字符串的比较是按照 <strong>Unicode</strong> 编码顺序来进行的。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Z&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Glow&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Glee&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Bee&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Be&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串的比较算法很简单，具体比较顺序如下：</p><ol><li>首先比较两个字符串的首位字符大小。</li><li>如果一方字符较大（或较小），则判定结束，给出结果。</li><li>否则，如果两个字符串首位字符相等，则各自取出下一个字符进行比较，规则同 2 。</li><li>重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。</li><li>如果两个字符串字符同时用完，则判断两个字符串是相等的，否则未结束的字符串会被认为更大。</li></ol><h2 id="不同类型的比较" tabindex="-1"><a class="header-anchor" href="#不同类型的比较"><span>不同类型的比较</span></a></h2><p>当对不同类型的值进行比较时， JS 会先将其转换为数字（Number）再判定大小。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;2&#39; 会被转化为数字 2</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;01&#39;</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;01&#39; 会被转化为数字 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于布尔类型，<code>true</code>会被转换为 <code>1</code>、<code>false</code> 转化为 <code>0</code>。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>NaN</code> 的比较行为。<br> 在进行数字转换的时候，可能会出现 <code>NaN</code> 的情况，因此我们需要进行对 <code>NaN</code> 比较行为的判定。<code>NaN</code> 是 JavaScript 中<strong>唯一一个与自身不相等的值</strong>。<br> NaN与任何值比较（包括自身）均返回 <code>false</code>，但使用 <code>!=</code> 或 <code>!==</code> 时会返回 <code>true</code> 。</p></blockquote><blockquote><p>⚠️ 行为不同导致结果也不同<br> 需要记住不同类型值比较时 JS 会先转换为数字，这时会进行数字转换，这意味着两个值转换为布尔值的时候结果不同，并不意味着二者进行比较的结果一定不同，导致这点的原因是因为布尔转换和数字转换的规则是有差别的。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="严格相等与严格不相等" tabindex="-1"><a class="header-anchor" href="#严格相等与严格不相等"><span>严格相等与严格不相等</span></a></h2><p>普通的相等性检查 <code>==</code> 存在一个问题，它不能区分出 <code>0</code> 和 <code>false</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token number">0</span> <span class="token operator">!=</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>也同样无法区分空字符串和 <code>false</code> ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token string">&#39;&#39;</span> <span class="token operator">!=</span> <span class="token boolean">false</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这是因为上面我们讨论过的，对于不同类型的值进行比较时，会转换为数字来进行比较。而根据 Number 类型的转化规则，false 和空字符串都会转换为 0 。</p><p>因此，为了弥补相等性检查缺失的这一功能，出现了严格相等和严格不相等。</p><p><strong>严格相等运算符</strong> <code>===</code> 在进行比较时<strong>不会做任何的类型转换。</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，因为被比较值的数据类型不同</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同样的，严格不相等符号是：<code>!==</code>。</p><h2 id="对-null-和-undefined-进行比较" tabindex="-1"><a class="header-anchor" href="#对-null-和-undefined-进行比较"><span>对 null 和 undefined 进行比较</span></a></h2><p>当使用 <code>null</code> 或 <code>undefined</code> 与其他值进行比较时，存在一些特殊规则需要知道。</p><p>当使用严格相等 <code>===</code> 进行比较时：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false，它们是不同类型。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用 非严格相等 <code>==</code> 比较两者时：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特殊规则</strong> ：非严格相等时（<strong>注意仅仅在非严格相等时</strong>），<code>null</code> 和 <code>undefined</code> 会被认为是相等的，它们仅仅等于自己和对方而不等于其他的任何值，包括 0 。</p><p><strong>当使用数学式或其他方法比较 <code>&gt; &lt; &lt;= &gt;=</code>时</strong> ： <code>null/undefined</code> 会被转换为数字：<code>null</code> 被转化为 <code>0</code>，<code>undefined</code> 被转化为 <code>NaN</code>。</p><h2 id="奇怪的比较结果" tabindex="-1"><a class="header-anchor" href="#奇怪的比较结果"><span>奇怪的比较结果</span></a></h2><p>经过了上面的讨论，下面让我们来看一下奇怪的比较情况，理解这些特殊情况发生了什么，能够一定程度上避免出现错误，便于调试。</p><p>通过比较 <code>null</code> 和 0 可得：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (1) false</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2) false</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3) true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并不奇怪，这个结果仍然符合我们之前的讨论。首先要记得，根据上面的讨论我们知道了，<code>==</code> 和其他的比较运算符 <code>&gt;= &lt;= &gt; &lt;</code> 所使用代码逻辑是相互独立的。</p><p>还记得刚刚的讨论吗？ <code>==</code> 符号中存在这特殊的规则，<code>null</code> 和 <code>undefined</code> 仅仅等于它们自己和对方，所以它和 0 也自然不相等。而对于 <code>&gt;=</code> 来说，它仍然遵循着基本的比较规则，也就是将 <code>null</code> 转换为 0 然后进行比较，这也就是什么会有这样的结果。</p><p>而对于 undefined 也同样存在一些比较奇怪的比较情况：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (1)</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (2)</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (3)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因如下：</p><ul><li><code>(1)</code> 和 <code>(2)</code> 都返回 <code>false</code> 是因为 <code>undefined</code> 进行数字转换的时候变成了 <code>NaN</code> （参照类型转换章节），在本篇之前的部分我们已经简单讨论过 <code>NaN</code> 的行为，它只在作为 <code>!=</code> 或 <code>!==</code> 时为 <code>true</code> ，除此之外和任何值比较均为 <code>false</code>。</li><li><code>(3)</code> ，由于不严格相等的特殊规则，<code>null</code> 和 <code>undefined</code> 仅仅等于它们自己和彼此，故上面和 0 的比较为 <code>false</code>。</li></ul><h2 id="避免问题" tabindex="-1"><a class="header-anchor" href="#避免问题"><span>避免问题</span></a></h2><ul><li>除了严格相等 <code>===</code> 外，其他凡是有 <code>undefined/null</code> 参与的比较都需要格外小心。</li><li>除非你非常清除你在做什么，否则永远不要使用 <code>&gt;= &lt; &gt; &lt;=</code> 去比较一个可能为 <code>null/undefined</code> 的变量。对于取值可能是 <code>null/undefined</code> 的变量，请按需要分别检查它的取值情况。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>比较运算符始终返回布尔值。</li><li>字符串的比较，会按照 <code>Unicode</code>编码逐字符比较大小。</li><li>当对不同的值进行比较时，通常情况（不包括严格相等检查）先被转换为数字再进行比较。</li><li>在非严格相等 <code>==</code> 下，<code>null</code> 和 <code>undefined</code> 仅仅与自己和彼此相等。</li><li>在使用 <code>&gt;</code> 或 <code>&lt;</code> 进行比较时，需要注意变量可能为 <code>null/undefined</code> 的情况。比较好的方法时单独检查变量是否等于 <code>null/undefined</code>。</li></ul>`,56)]))}const i=s(p,[["render",o],["__file","08-zhidebijiao.html.vue"]]),d=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/08-zhidebijiao.html","title":"值的比较","lang":"zh-CN","frontmatter":{"title":"值的比较","date":"2025-02-04 13:41"},"headers":[{"level":2,"title":"比较结果为 Boolean 类型","slug":"比较结果为-boolean-类型","link":"#比较结果为-boolean-类型","children":[]},{"level":2,"title":"字符串比较","slug":"字符串比较","link":"#字符串比较","children":[]},{"level":2,"title":"不同类型的比较","slug":"不同类型的比较","link":"#不同类型的比较","children":[]},{"level":2,"title":"严格相等与严格不相等","slug":"严格相等与严格不相等","link":"#严格相等与严格不相等","children":[]},{"level":2,"title":"对 null 和 undefined 进行比较","slug":"对-null-和-undefined-进行比较","link":"#对-null-和-undefined-进行比较","children":[]},{"level":2,"title":"奇怪的比较结果","slug":"奇怪的比较结果","link":"#奇怪的比较结果","children":[]},{"level":2,"title":"避免问题","slug":"避免问题","link":"#避免问题","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/08-值的比较.md"}');export{i as comp,d as data};
