import{_ as n,c as a,a as e,o as p}from"./app-DEZf6KcN.js";const c={};function t(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句"><span>switch”语句</span></a></h1><p><code>switch</code> 语句可以替代多个 <code>if</code> 判断，它为多分支选择的情况提供了一个更具描述性的方法。</p><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><p><code>switch</code> 语句至少一个 <code>case</code> 代码块和一个可选的 <code>default</code> 代码块。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&#39;value1&#39;</span><span class="token operator">:</span>  <span class="token comment">// if (x === &#39;value1&#39;)</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">case</span> <span class="token string">&#39;value2&#39;</span><span class="token operator">:</span>  <span class="token comment">// if (x === &#39;value2&#39;)</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token operator">...</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token keyword">break</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>比较 <code>x</code> 值与第一个 <code>case</code> （也就是<code>value1</code>） 是否<strong>严格相等</strong>，然后比较第二个 <code>case</code> （ <code>value2</code> ）以此类推。</li><li>如果相等， <code>switch</code> 语句就执行相应 <code>case</code> 下的代码块，直到遇到最靠近的 <code>break</code> 语句（或者直到 <code>switch</code> 语句末尾）。</li><li>如果没有符合的 <code>case</code> ，则执行 <code>default</code> 代码块（如果 <code>default</code> 存在）。</li></ul><p>需要注意的是，这里 <code>break</code> 会跳出 <code>switch</code> ，也就是说，如果省略 <code>break</code> ，就意味着代码会继续向下执行。</p><p>例如，如果是这样一段代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Too small&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Exactly!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Too big&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;I don&#39;t know such values&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们会看到i连续执行三个 <code>alert</code> ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Exactly!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Too big&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;I don&#39;t know such values&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ℹ️ 任何表达式都可以成为 <code>switch/case</code> 的参数 <code>switch</code> 和 <code>case</code> 都允许任意常量表达式（对于动态条件比如 <code>x &gt; 10</code> 是不支持的）。 比如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token operator">+</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">case</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">:</span></span>
<span class="line"> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;this runs, because +a is 1, exactly equals b+1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line"> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;this doesn&#39;t run&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>+a</code> 返回 <code>1</code>，这个值会和 <code>case</code> 中 <code>b + 1</code> 进行比较，然后执行对应的代码。</p></blockquote><h2 id="case-分组" tabindex="-1"><a class="header-anchor" href="#case-分组"><span>“case” 分组</span></a></h2><p>共享同一段代码的几个 <code>case</code> 可以被分成一组：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Right!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// (*) 下面这两个 case 被分在一组</span></span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Wrong!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Why don&#39;t you take a math class?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">default</span><span class="token operator">:</span></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;The result is strange. Really.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上面这个例子我们可以看到，<code>case 3</code> 和 <code>case 5</code> 执行同样的代码，这利用了缺失 <code>break</code> 的行为特性。</p><h2 id="类型很关键" tabindex="-1"><a class="header-anchor" href="#类型很关键"><span>类型很关键</span></a></h2><p>需要特别强调的是，这里的相等是严格相等。被比较的值必须是相同的类型才能进行匹配。</p>`,19)]))}const o=n(c,[["render",t],["__file","13-switchyuju.html.vue"]]),u=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/13-switchyuju.html","title":"\\"switch\\"语句","lang":"zh-CN","frontmatter":{"title":"\\"switch\\"语句","date":"2025-02-05 13:46"},"headers":[{"level":2,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":2,"title":"“case” 分组","slug":"case-分组","link":"#case-分组","children":[]},{"level":2,"title":"类型很关键","slug":"类型很关键","link":"#类型很关键","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/13-switch语句.md"}');export{o as comp,u as data};
