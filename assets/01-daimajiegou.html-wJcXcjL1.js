import{_ as s,c as a,a as e,o as p}from"./app-DEZf6KcN.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构"><span>代码结构</span></a></h1><h2 id="语句" tabindex="-1"><a class="header-anchor" href="#语句"><span>语句</span></a></h2><p>语句是执行行为 <code>(action)</code> 的语法结构和命令。</p><p>通常，每条语句独占一行，以提高代码的可读性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分号" tabindex="-1"><a class="header-anchor" href="#分号"><span>分号</span></a></h2><p>当存在换行符 <code>(line break)</code> 时，在大多数情况下可以省略分号。</p><p><strong>大多数情况下，换行可以理解为“隐式”的分号</strong> ，但是大多数情况并不意味着总是！有很多换行并不是分号的例子。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> </span>
<span class="line"><span class="token number">5</span> <span class="token operator">+</span> </span>
<span class="line"><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要讨论一个问题点，什么时候不加分号会产生错误。下面我给出一段错误代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在浏览器控制台中进行实验可以发现上面代码会产生报错，错误原因是浏览器会将上述代码尝试合并为一行，即： <code>alert(&quot;Hello&quot;)[1, 2].forEach(alert);</code> ，此时的语义为获取 <code>alert(&quot;Hello&quot;)</code>返回值的 <code>1, 2</code> 属性，很明显会产生报错，因为 <code>alert</code> 函数的返回值为 <code>undefined</code> ，即无返回值。</p><p>那么为什么会出现这种情况呢？</p><p>我们需要了解为什么 JavaScript 允许我们省略分号。现代JS（简写JavaScript）引入了 <strong>ASI机制（Automatic Semicolon Insertion，自动分号插入）</strong> ，是JavaScript引擎在解析代码时的一项机制，它会在某些特定条件下自动补充分号（<code>;</code>)，即使代码中没有显式书写分号。这一设计的初衷是让代码更简洁。</p><p><strong>ASI的核心规则</strong></p><p>根据 ECMAScript 规范，ASI会在以下场景触发：</p><ol><li>必须加分号场景（硬性插入） <ul><li><p>行结束符（换行）且下一行无法延续当前语句：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment">// 此处自动插入分号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>代码块结束（如 <code>}</code> 后）：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span>  <span class="token comment">// 此处自动插入分号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><code>return</code>、<code>break</code>、<code>throw</code>、<code>continue</code> 后紧跟换行：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">return</span>  <span class="token comment">// ASI 在此插入分号 → 返回 undefined</span></span>
<span class="line">  <span class="token number">123</span><span class="token punctuation">;</span>  <span class="token comment">// 这行代码不会执行</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li>禁止加分号的场景（危险场景） <ul><li>下一行以 <code>[</code>、<code>(</code>、<code>/</code>、<code>+</code>、<code>-</code> 等符号开头，引擎会认为当前语句未结束：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 示例1：未触发 ASI</span></span>
<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>  <span class="token comment">// 解析为 1[1,2] → 报错</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 示例2：未触发 ASI</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 解析为 alert(&quot;Hello&quot;)(function(){}) → 报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>为什么需要ASI？</strong></p><ul><li>降低代码冗余：允许省略分号，使代码更简洁（尤其在函数式编程中）。</li><li>容错性：修复开发者遗漏的分号错误。</li></ul><p><strong>ASI的陷阱与规避</strong></p><p>陷阱场景</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 陷阱1：return 后换行</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> </span>
<span class="line">    <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Alice&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// ASI 插入分号 → 返回 undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 陷阱2：以 [ 或 ( 开头的新行</span></span>
<span class="line"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span> <span class="token comment">// 解析为 1[1,2] → TypeError</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>规避方法</p><ol><li>显示书写分号（推荐）：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>危险行首添加分号：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span> <span class="token comment">// 在 [ 前加分号</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>使用代码格式化工具（如Prettier、ESLint）自动处理分号。</li></ol><h2 id="代码注释" tabindex="-1"><a class="header-anchor" href="#代码注释"><span>代码注释</span></a></h2><p>在 JavaScript 中的注释一般有两种，单行和多行注释，他们的语法如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 这行注释独占一行</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;这是单行注释&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">/* 两个消息的例子。</span>
<span class="line">这是一个多行注释。</span>
<span class="line">*/</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;这是多行注释&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，一般不支持嵌套注释：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">  /* 嵌套注释 ?!? */</span></span>
<span class="line"><span class="token operator">*</span><span class="token operator">/</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const o=s(t,[["render",l],["__file","01-daimajiegou.html.vue"]]),u=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/01-daimajiegou.html","title":"代码结构","lang":"zh-CN","frontmatter":{"title":"代码结构","date":"2025-01-31 18:46"},"headers":[{"level":2,"title":"语句","slug":"语句","link":"#语句","children":[]},{"level":2,"title":"分号","slug":"分号","link":"#分号","children":[]},{"level":2,"title":"代码注释","slug":"代码注释","link":"#代码注释","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/01-代码结构.md"}');export{o as comp,u as data};
