import{_ as s,c as a,a as e,o as p}from"./app-DEZf6KcN.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><p>在前面的部分，我们曾经讨论过浏览器提供的内建函数，如 <code>prmpt(message, default)</code>、<code>alert(message)</code>、<code>confirm(question)</code>。在 JavaScrip中，我们可以创建自己的函数。</p><h2 id="函数声明" tabindex="-1"><a class="header-anchor" href="#函数声明"><span>函数声明</span></a></h2><p>使用<strong>函数声明</strong>创建函数。</p><p>定义方式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">parameter1<span class="token punctuation">,</span> parameter2<span class="token punctuation">,</span> <span class="token operator">...</span> parameterN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token operator">...</span>body<span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>function</code> 关键字用于定义函数，紧跟着函数名 <code>name</code> ，然后用括号包裹 <strong>参数</strong> 列表（用逗号分隔）。</p><p>例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Hello &#39;</span> <span class="token operator">+</span> name <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个被定义的函数可以在后续通过我们定义好的名称来调用，上面通过名称 <code>showMessage(&quot;张三&quot;)</code> 来进行调用。</p><p>调用多次也就会对应执行多次。这也是函数的主要目的之一，我们不需要在运行同一段代码时反复的构建它，将它写成一个函数，在需要时调用就好了，这<strong>避免了代码重复</strong>。</p><h2 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量"><span>局部变量</span></a></h2><p>在函数中声明的变量只在该函数内部可见。事实上对于局部变量在前面的变量小结中我们讨论过，对于 <code>var</code> 类型变量遵循函数作用域，即在函数中定义的变量也会被限定在函数内部。而对于 <code>let</code> 和 <code>const</code> 它们遵循块级作用域，即 <code>{}</code> 包裹的区域。故，在函数内部定义的变量无论是什么类型，始终会被限定在函数内部可见。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;Hello, I&#39;m JavaScript!&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 局部变量</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, I&#39;m JavaScript!</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 错误！变量是函数的局部变量</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="外部变量" tabindex="-1"><a class="header-anchor" href="#外部变量"><span>外部变量</span></a></h2><p>函数也可以访问外部变量，这在变量中讨论的作用域链是吻合的。</p><p>函数会根据作用域链进行变量访问，这意味着可以在函数中访问外部的变量，以及对变量的修改都是被允许的。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  userName <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">;</span> <span class="token comment">// (1) 改变外部变量</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello, &#39;</span> <span class="token operator">+</span> userName<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John 在函数调用之前</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Bob，值被函数修改了</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时需要注意，由于作用域链的存在，对变量的引用存在就近原则，也就是说，局部变量会对同名的全局变量产生变量遮蔽，即优先会访问同名的局部变量。</p><blockquote><p>ℹ️ 全局变量 任何函数之外声明的变量，例如上述代码中的外部变量 <code>userName</code>，都被称为 <strong>全局</strong> 变量。 减少全局变量的使用是一种很好的做法。现代的代码很少甚至没有全局变量。大多数变量存在于它们的函数中。但是有时候，全局变量能够用于存储项目级别的数据。</p></blockquote><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h2><p>我们可以通过参数将任意数据传递给函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 参数：from 和 text</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span>from <span class="token operator">+</span> <span class="token string">&#39;: &#39;</span> <span class="token operator">+</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Ann&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: Hello! (*)</span></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&#39;Ann&#39;</span><span class="token punctuation">,</span> <span class="token string">&quot;What&#39;s up?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: What&#39;s up? (**)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>(*)</code> 和 <code>(**)</code> 的函数调用时，给定值被复制到了局部变量 <code>from</code> 和 <code>text</code> 。然后函数使用它们进行计算。</p><p>需要注意的是，函数调用时传递的参数，如果参数是原始类型（七种原始类型），那么其实际上是将值复制后参与函数运算，换句话来说，它是新产生的独立的变量，在函数中对其进行修改，不会影响原来的变量。但是如果传递的是对象的话，情况就不同了，这个我们在后续会进行深入讨论。</p><p>接下来让我们了解相关的术语：</p><ul><li>形参（parameter） 是函数声明中括号内列出的变量（它是函数声明时的术语）。</li><li>实参（argument）时调用函数时传递给函数的值（它时函数调用时的术语）。</li></ul><h2 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值"><span>默认值</span></a></h2><p>如果一个函数被调用，但有参数（argument）未被提供，那么相应的值就会变成 <code>undefined</code>。</p><p>例如，之前提到的函数 <code>showMessage(from, text)</code> 可以只使用一个参数（argument）调用：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>那不是错误，这样调用输出 <code>&quot;*Ann*: undefined&quot;</code>。因为参数 <code>text</code> 的值未被传递，所以变成了 <code>undefined</code>。</p><p>我们可以使用 <code>=</code> 为函数声明中的参数指定所谓的“默认”（如果对应参数的值未被传递则使用）值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token string">&quot;no text given&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token string">&quot;Ann&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ann: no text given</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在如果 <code>text</code> 参数未被传递，它将会得到值 <code>&quot;no text given&quot;</code>。</p><p>这里 <code>&quot;no text given&quot;</code> 是一个字符串，但它可以是更复杂的表达式，并且只会在缺少参数时才会被计算和分配。所以，这也是可能的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text <span class="token operator">=</span> <span class="token function">anotherFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// anotherFunction() 仅在没有给定 text 时执行</span></span>
<span class="line">  <span class="token comment">// 其运行结果将成为 text 的值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ℹ️ 默认参数的计算 在 JavaScript 中，每次函数在没带个别参数的情况下被调用，默认参数就会被计算出来。 在上面的例子中，如果传递了参数 <code>text</code>，那么 <code>anotherFunction()</code> 就不会被调用。 如果没传递参数 <code>text</code>，那么 <code>anotherFunction()</code> 就会被调用。</p></blockquote><blockquote><p>ℹ️ 在 JavaScript 老代码中的默认参数 在之前，JavaScript 不支持默认参数的语法。所以人们会使用其他方式来设置默认参数。 如今，我们会在旧代码中看到它们。 例如，显式地检查 <code>undefined</code> ：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> text <span class="token operator">=</span> <span class="token string">&#39;no text given&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> from <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> text <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>……或者使用 <code>||</code> 运算符：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token parameter">from<span class="token punctuation">,</span> text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 如果 text 的值为假值，则分配默认值</span></span>
<span class="line">  <span class="token comment">// 这样赋值 text == &quot;&quot; 与 text 无值相同</span></span>
<span class="line">  text <span class="token operator">=</span> text <span class="token operator">||</span> <span class="token string">&#39;no text given&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="后备的默认参数" tabindex="-1"><a class="header-anchor" href="#后备的默认参数"><span>后备的默认参数</span></a></h2><p>除了上面讨论的两种关于老代码中的默认参数计算，现代 JavaScript 引擎还支持空值合并运算符 <code>??</code>，它在大多数假值（例如 <code>0</code>）应该被视为“正常值”时更具优势：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showCount</span><span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 如果 count 为 undefined 或 null，则提示 &quot;unknown&quot;</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span>count <span class="token operator">??</span> <span class="token string">&quot;unknown&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">showCount</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"><span class="token function">showCount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unknown</span></span>
<span class="line"><span class="token function">showCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// unknown</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p>函数可以将一个值返回到调用代码中作为结果。</p><p>最简单的例子是将两个值相加的函数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> result <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>指令 <code>return</code> 可以在函数的任意位置。当执行到达时，函数停止，并将值返回给调用代码（分配给上述代码中的 <code>result</code>）。</p><p>在一个函数中可能会出现很多次 <code>return</code>。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">checkAge</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;Got a permission from the parents?&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;How old are you?&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">checkAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Access granted&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Access denied&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只使用 <code>return</code> 但没有返回值也是可行的。但这会立即导致函数退出。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showMovie</span><span class="token punctuation">(</span><span class="token parameter">age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">checkAge</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Showing you the movie&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ℹ️ 空值的 <code>return</code> 或没有 <code>return</code> 的函数返回值为 <code>undefined</code> 如果函数无返回值，它就会像返回 <code>undefined</code> 一样：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* 没有代码 */</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空值的 <code>return</code> 和 <code>return undefined</code> 等效：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><blockquote><p>⚠️ 不要在 <code>return</code> 与返回值之间添加新行 对于 <code>return</code> 的长表达式，可能你会很想将其放在单独一行，如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">return</span></span>
<span class="line"><span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但这不行，由于 ASI（Automatic Semicolon Insertion）的存在，他会默认在 return 后紧跟换行的情况时默认补上分号，它实际上和下面的代码是等价的：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">(</span>some <span class="token operator">+</span> long <span class="token operator">+</span> expression <span class="token operator">+</span> or <span class="token operator">+</span> whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，实际上它的返回值变成了空值。 如果我们想要将返回值的表达式写成跨多行的形式，那么应该在 <code>return</code> 的同一行开始写此表达式。或者至少按照如下的方式放上左括号：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">  some <span class="token operator">+</span> long <span class="token operator">+</span> expression</span>
<span class="line">  <span class="token operator">+</span> or <span class="token operator">+</span></span>
<span class="line">  whatever <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后它就能像我们预想的那样正常运行了。</p></blockquote><h2 id="函数命名" tabindex="-1"><a class="header-anchor" href="#函数命名"><span>函数命名</span></a></h2><p>函数就是行为（action）。所以它们的名字一般是动词，并且应该简短且尽可能准确地描述函数地作用。这样可以使得读代码的人可以清晰的知道函数的功能。</p><p>普遍的做法是用一个动词前缀来开始一个函数命名，由于这个前缀是一种模糊描述。团队内部需要就前缀含义达成一致。</p><p>例如：</p><ul><li><code>&quot;get...&quot;</code>——返回一个值。</li><li><code>&quot;calc...&quot;</code>——计算某些内容。</li><li><code>&quot;create...&quot;</code>——创建某些内容。</li><li><code>&quot;check...&quot;</code>——检查某些内容并返回 boolean 值，等。</li></ul><p>示例：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"></span>
<span class="line"><span class="token function">showMessage</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>     <span class="token comment">// 显示信息</span></span>
<span class="line"><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>          <span class="token comment">// 返回 age（gets it somehow）</span></span>
<span class="line"><span class="token function">calcSum</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>         <span class="token comment">// 计算求和并返回结果</span></span>
<span class="line"><span class="token function">createForm</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token comment">// 创建表单（通常会返回它）</span></span>
<span class="line"><span class="token function">checkPermission</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 检查权限并返回 true/false</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了前缀，只需要瞥一眼函数名就可以了解它的功能是什么，返回什么样的值。</p><blockquote><p>ℹ️ 一个函数——一个行为 一个函数应该只包含函数名所指定的功能，而不是做更多与函数名无关的功能。</p><p>两个独立的行为通常需要两个函数，即使它们通常被一起调用（在这种情况下，我们可以创建第三个函数来调用这两个函数）。</p><p>有几个违反这一规则的例子：</p><ul><li><code>getAge</code> —— 如果他通过 <code>alert</code> 将 age 显示出来，那就有问题了（只应该是获取）。</li><li><code>createForm</code> —— 如果它包含修改文档的操作，例如向文档添加一个表单，那就有问题了（只应该创建表单并返回）。</li><li><code>checkPermission</code> —— 如果它显示 <code>access granted/denied</code> 消息，那就有问题了（只应执行检查并返回结果）。</li></ul><p>这些例子假设函数名前缀具有通用的含义。你和你的团队可以自定义这些函数名前缀的含义，但是通常都没有太大的不同。无论怎样，你都应该对函数名前缀的含义、带特定前缀的函数可以做什么以及不可以做什么有深刻的了解。所有相同前缀的函数都应该遵守相同的规则。并且，团队成员应该形成共识。</p></blockquote><blockquote><p>ℹ️ 非常短的函数命名 常用的函数有时会有非常短的名字。 例如，<code>Jquery</code> 框架用 <code>$</code> 定义一个函数。 这些都是例外，一般而言，函数名应简明扼要且具有描述性。</p></blockquote><h2 id="函数-注释" tabindex="-1"><a class="header-anchor" href="#函数-注释"><span>函数 == 注释</span></a></h2><p>函数应该简短且只有一个功能。如果这个函数功能复杂，那么把该函数拆分成几个小的函数是值得的。有时候遵循这个规则并不是那么容易，但这绝对是件好事。</p><p>一个单独的函数不仅更容易测试和调试 —— 它的存在本身就是一个很好的注释！</p><p>例如，比较如下两个函数 <code>showPrimes(n)</code>。它们的功能都是输出到 <code>n</code> 的素数。</p><p>第一个变体使用了一个标签：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showPrimes</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">nextPrime</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span> nextPrime<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span> i <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 一个素数</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个变体使用附加函数 <code>isPrime(n)</code> 来检验素数：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">showPrimes</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一个素数</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个变体更容易理解，我们通过函数名（<code>isPrime</code>）就可以喊出函数的行为，而不需要通过代码。人们通常把这样的代码成为 <strong>自描述</strong> 。</p><p>因此，即使我们不打算重用它们，也可以创建函数。函数可以让代码结构更清晰，可读性更强。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>函数声明方式如下所示：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">parameters<span class="token punctuation">,</span> delimited<span class="token punctuation">,</span> by<span class="token punctuation">,</span> comma</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">/* code */</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>作为参数传递给函数的值，会被复制到函数的局部变量。</li><li>函数可以访问外部变量。但它只能从内到外起作用。函数外部的代码看不到函数内的局部变量。</li><li>函数可以返回值。如果没有返回值，则其返回的结果是 <code>undefined</code> 。</li></ul><p>为了使代码简洁易懂，建议在函数中主要使用局部变量和参数，而不是外部变量。</p><p>与不获取参数但将修改外部变量作为副作用的函数相比，获取参数、使用参数并返回结果的函数更容易理解。</p><p>函数命名：</p><ul><li>函数名应该清楚地描述函数的功能。</li><li>一个函数使一个行为，所以函数名通常是动词。</li><li>有去多优秀的函数名前缀，如：<code>create…</code>、<code>show…</code>、<code>get…</code>、<code>check…</code> 等等。</li></ul>`,84)]))}const i=s(t,[["render",c],["__file","14-hanshu.html.vue"]]),u=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/14-hanshu.html","title":"函数","lang":"zh-CN","frontmatter":{"title":"函数","date":"2025-02-05 13:46"},"headers":[{"level":2,"title":"函数声明","slug":"函数声明","link":"#函数声明","children":[]},{"level":2,"title":"局部变量","slug":"局部变量","link":"#局部变量","children":[]},{"level":2,"title":"外部变量","slug":"外部变量","link":"#外部变量","children":[]},{"level":2,"title":"参数","slug":"参数","link":"#参数","children":[]},{"level":2,"title":"默认值","slug":"默认值","link":"#默认值","children":[]},{"level":2,"title":"后备的默认参数","slug":"后备的默认参数","link":"#后备的默认参数","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"函数命名","slug":"函数命名","link":"#函数命名","children":[]},{"level":2,"title":"函数 == 注释","slug":"函数-注释","link":"#函数-注释","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/14-函数.md"}');export{i as comp,u as data};
