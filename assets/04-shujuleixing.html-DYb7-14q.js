import{_ as s,c as a,a as e,o}from"./app-DEZf6KcN.js";const t={};function p(c,n){return o(),a("div",null,n[0]||(n[0]=[e(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><p>和其他编程语言相同，JavaScript 中的值也有其类型。</p><p>在 JavaScript 中有八种基本的数据类型，其中七种是原始类型，一种是引用类型，在稍后我们会进行初步的介绍。</p><h2 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型"><span>Number 类型</span></a></h2><p><em>number</em> 类型主要包括有<strong>整数、浮点数和特殊值</strong>。</p><p>整数很容易理解，即数学中的整数。如果你接触过编程语言，对于浮点数也不会陌生，其实就是带小数部分的数字，例如 <code>1.25</code>、<code>3.1415</code> 这样的数字。</p><p>对于 <code>Number</code>类型而言，有三种特殊值： <code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code> 。</p><ul><li><code>Infinity</code> 代表数学概念中的无穷大，即大于任何一个数的特殊值。你可以通过下面的方式获取到它。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通过除以0来获取到Infinity</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//或者直接使用Infinity关键字来使用它</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>NaN</code>代表一个计算错误。它会由一个错误的数学操作而产生，例如：</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;测试&#39;</span><span class="token operator">/</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使用字符串和Number进行除法，很明显是一个错误，NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>同时需要注意，NaN是 <em>”粘性的“</em> ，任何对 <code>NaN</code> 的进一步数学运算结果都会是 <code>NaN</code>：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;not a number&quot;</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，如果数学表达式中有一个 <code>NaN</code>， 会被传递到最终结果。</p><blockquote><p><code>NaN</code>传播性的例外情况： <code>NaN ** 0</code> 的结果为 1。 <code>A**B</code>表示A的B次方。</p></blockquote><blockquote><p>在 JavaScript 中进行数学运算是安全的，因为最坏的结果是得到 <code>NaN</code> 的结果，你的脚本永远不会因为一个致命错误而停止。比如除以0，将非数字字符串和数字运算，最坏的情况是会得到 <code>NaN</code></p></blockquote><h2 id="bigint-类型" tabindex="-1"><a class="header-anchor" href="#bigint-类型"><span>BigInt 类型</span></a></h2><p>在 JS 中， <code>Number</code> 类型无法安全地表示大于 <code>2**53 - 1</code> (即 <code>9007199254740991</code>)，或小于 <code>-(2**53 - 1)</code>的整数。</p><p>实际上 <code>Number</code> 类型可以存储更大的整数，(最多 <code>1.7976931348623157 * 10**308</code>)，但是超出安全整数范围（即正负 <code>2**53 - 1</code>）会出现精度问题，因为并非所有数字都适合固定64位存储。</p><p>大多数情况下 <code>Number</code> 的安全范围内已经足够使用了，但是有时我们会遇到需要表示更大范围整数的场景，此时我们需要使用 <code>BigInt</code> 来进行表示。</p><p><code>BigInt</code> 类型是最近被添加到 JavaScript 语言中的，用来表示任意长度的整数。</p><p>可以将 <code>n</code> 附加到整数字段的末尾来创建一个 <code>BigInt</code> 值。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 尾部的 &quot;n&quot; 表示这是一个 BigInt 类型</span></span>
<span class="line"><span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">1234567890123456789012345678901234567890n</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型"><span>String 类型</span></a></h2><p>JavaScript 中字符串必须被包含在引号中。</p><p>在 JS 中，有三种包含字符串的方式。</p><ol><li>双引号：<code>&quot;Hello&quot;</code></li><li>单引号：<code>&#39;Hello&#39;</code></li><li>反引号：<code>\`Hello\`</code></li></ol><p>双引号和单引号都是“简单引用”，在 JavaScript 中两者几乎无差别。而反引号是 <strong>功能扩展</strong> 引号。它们允许我们通过将变量和表达式包装在 <code>\${……}</code> 中，将它们插入到字符串中。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 嵌入一个变量</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Hello John!</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 嵌入一个表达式</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">the result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the result is 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JavaScript 中没有 <em>character</em> 类型。<br> 在例如 C，Java 这样的高级语言中，我们在数据类型中常常可以看见 char 类型的身影，但是在 JavaScript 中没有这种类型。只有一种 <code>string</code> 类型，一个字符串可以包含零个、一个或多个字符。</p></blockquote><h2 id="boolean-类型-逻辑类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型-逻辑类型"><span>Boolean 类型（逻辑类型）</span></a></h2><p>boolean 类型仅包含两个值： <code>true</code> 和 <code>false</code>。</p><p><code>true</code> 意味着 “yes，正确”，<code>false</code> 意味着 “no，不正确”。</p><h2 id="null-值" tabindex="-1"><a class="header-anchor" href="#null-值"><span>null 值</span></a></h2><p>特殊的 <code>null</code> 值不属于上述任何一种类型。</p><p>它构成了一个独立的类型，只包含 <code>null</code> 值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>相较于其他编程语言，JS 中的 <code>null</code> 不是一个对对象的空引用或者 <code>null</code> 指针。</p><p>JS 中的 <code>null</code> 仅仅是一个代表空或者无的特殊值。</p><h2 id="undefined-值" tabindex="-1"><a class="header-anchor" href="#undefined-值"><span>undefined 值</span></a></h2><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。</p><p><code>undefined</code> 的含义是 <code>未被赋值</code> 。 如果一个变量被声明但是未给与一个值初始化，则会被默认初始化为 <code>undefined</code>:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出 &quot;undefined&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上来说，可以显式的将 <code>undefined</code> 赋值给一个变量，但是并不建议这样做，这是为了保持语义化。</p><p>通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p><h2 id="object-类型和-symbol-类型" tabindex="-1"><a class="header-anchor" href="#object-类型和-symbol-类型"><span>Object 类型和 Symbol 类型</span></a></h2><p><code>object</code> 类型是一个特殊的类型。</p><p>其他所有的数据类型都被称为“原始类型”（包括Symbol），它们的值都只包含一个单独的内容（字符串、数字或者其他）。而 <code>object</code> 则用于存储数据集合或者更复杂的数据体。</p><p>它十分重要，这里只做简单了解，在后续我们进行更详细的探索，目前来说，认识到它是 JS 的一种类型就足够了。</p><p><code>Symbol</code> 类型（ES6 引入）用于创建对象的唯一标识符。我们在这里提到了 <code>Symbol</code> 是为了完整性，和 <code>Object</code> 一样，目前只需要认识到存在这个类型即可，我们会在后面进行具体的讨论。</p><h2 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符"><span>typeof 运算符</span></a></h2><p><code>typeof</code> 运算符返回参数的类型。当遇到需要判断变量类型的场景时，这个运算符会非常有用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// &quot;undefined&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">0</span> <span class="token comment">// &quot;number&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token number">10n</span> <span class="token comment">// &quot;bigint&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment">// &quot;boolean&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token string">&quot;foo&quot;</span> <span class="token comment">// &quot;string&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;symbol&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> Math <span class="token comment">// &quot;object&quot;  (1)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// &quot;object&quot;  (2)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">typeof</span> alert <span class="token comment">// &quot;function&quot;  (3)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 <code>typeof</code> 运算符有几点解释：</p><ol><li><code>typeof null</code> 的结果是 <code>&quot;Object&quot;</code> 。这是官方承认的 <code>typeof</code> 的错误，这个问题来自 JS 语言的早期阶段，并为了兼容性保留了下来。 但是 <code>null</code> 绝对不是一个 <code>Object</code> 。<code>null</code> 是一个单独的类型。</li><li><code>typeof alert</code>的结果是 <code>&quot;function&quot;</code>，因为 <code>alert</code> 在 JavaScript 语言中是一个函数。在 JS 中没有一个特别的 &quot;function&quot; 类型。函数隶属于 <code>object</code> 类型。但是 <code>typeof</code> 会对函数区分对待，并返回 <code>&quot;function&quot;</code>。这也是来自于 JavaScript 语言的早期的问题。 从技术上来说这种行为是错误的，但是在实际编程中却非常方便。</li></ol><blockquote><p><code>typeof(x)</code> 语法 你可能还会遇到另一种语法：<code>typeof(x)</code>。它与 <code>typeof x</code> 相同。 简单点说： <code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分（有点类似 <code>+</code> 号的行为）。它是数学运算分组的括号。有些人喜欢这样的风格。</p></blockquote>`,56)]))}const i=s(t,[["render",p],["__file","04-shujuleixing.html.vue"]]),d=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/04-shujuleixing.html","title":"数据类型","lang":"zh-CN","frontmatter":{"title":"数据类型","date":"2025-02-02 18:32"},"headers":[{"level":2,"title":"Number 类型","slug":"number-类型","link":"#number-类型","children":[]},{"level":2,"title":"BigInt 类型","slug":"bigint-类型","link":"#bigint-类型","children":[]},{"level":2,"title":"String 类型","slug":"string-类型","link":"#string-类型","children":[]},{"level":2,"title":"Boolean 类型（逻辑类型）","slug":"boolean-类型-逻辑类型","link":"#boolean-类型-逻辑类型","children":[]},{"level":2,"title":"null 值","slug":"null-值","link":"#null-值","children":[]},{"level":2,"title":"undefined 值","slug":"undefined-值","link":"#undefined-值","children":[]},{"level":2,"title":"Object 类型和 Symbol 类型","slug":"object-类型和-symbol-类型","link":"#object-类型和-symbol-类型","children":[]},{"level":2,"title":"typeof 运算符","slug":"typeof-运算符","link":"#typeof-运算符","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/04-数据类型.md"}');export{i as comp,d as data};
