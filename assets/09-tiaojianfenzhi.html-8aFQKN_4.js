import{_ as n,c as a,a as e,o as p}from"./app-DEZf6KcN.js";const t={};function c(l,s){return p(),a("div",null,s[0]||(s[0]=[e(`<h1 id="条件分支-if-和" tabindex="-1"><a class="header-anchor" href="#条件分支-if-和"><span>条件分支：if 和 &#39;?&#39;</span></a></h1><p>和每一种编程语言一样，JS 也有条件分支语句，用于根据条件执行不同操作。</p><h2 id="if-语句" tabindex="-1"><a class="header-anchor" href="#if-语句"><span>”if“ 语句</span></a></h2><p><code>if(...)</code> 语句计算括号里的条件表达式，结果为 <code>true</code> 则执行对应的代码块：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 这里 year 会转换为布尔值进行计算</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要执行的代码块只有一行代码，也可以省略大括号，但是当需要借助 <code>if</code> 去选择性执行多条语句时，大括号是必须的。对于单条语句：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>if</code> 后如果不是使用 <code>{}</code> 包裹的代码块，那么默认会和最近的一条语句进行结合。</p><h2 id="布尔转化" tabindex="-1"><a class="header-anchor" href="#布尔转化"><span>布尔转化</span></a></h2><p><code>if (...)</code> 语句会计算圆括号内的表达式，并将计算结果转换为布尔型。</p><p>例如： <code>if( num == 2015 )</code>，这里 <code>num</code> 是一个变量，<code>if</code> 会根据 <code>num</code> 的值进行计算得到结果，然后判断是否执行。</p><p>需要知道的是，括号如果遇到非布尔类型的结果，会根据类型转换将其转为布尔类型进行判断。</p><h2 id="else-语句" tabindex="-1"><a class="header-anchor" href="#else-语句"><span>“else” 语句</span></a></h2><p><code>if</code> 语句有时会包含一个可选的 “else” 块。如果判断条件不成立，就会执行它内部的代码。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;In which year was ECMAScript-2015 specification published?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2015</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;You guessed it right!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;How can you be so wrong?&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2015 以外的任何值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多个条件" tabindex="-1"><a class="header-anchor" href="#多个条件"><span>多个条件</span></a></h2><p>有时也会需要对一个条件的多种情况做判定，可以通过 <code>else if(...)</code> 来实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> year <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;In which year was ECMAScript-2015 specification published?&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&lt;</span> <span class="token number">2015</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Too early...&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>year <span class="token operator">&gt;</span> <span class="token number">2015</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Too late&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Exactly!&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种结构体的执行顺序是自上而下的，程序会首先判定 <code>if</code> 内的条件是否成立，如果成立则执行对应的语句内容并跳过剩下的所有代码，如果不成立则跳到下一个最近的 <code>else if</code> 中去进行条件判断，同样的如果成立则执行对应语句并跳过剩下的所有判断语句与判断内容，不成立跳到下一个判定，反复循环。当所有条件均不成立时，才执行 <code>else</code> 对应的代码块内容。</p><h2 id="条件运算符" tabindex="-1"><a class="header-anchor" href="#条件运算符"><span>条件运算符 <code>?</code></span></a></h2><p>这个运算符通过 <code>?</code> 表示。有时它被称为三元运算符，因为它涉及到三个运算元，事实上它时 JavaScript 中唯一一个有这么多操作数的运算符。 语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> result <span class="token operator">=</span> condition <span class="token operator">?</span> value1 <span class="token operator">:</span> value2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>condition</code> 可以是一个表达式，它最终会被转换成一个布尔值，根据这个值来决定返回值。当 <code>condition</code> 结果是 <code>true</code> 时，<code>:</code> 号前面的值将执行并将结果返回。而当 <code>condition</code> 结果是 <code>false</code> 时，<code>:</code> 号后面的值将执行并将结果返回。需要注意，<code>:</code> 左右的value（也可以是一个表达式），只会有一个触发。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> accessAllowed <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这个例子中括号可以去除，因为 <code>?</code> 号的优先级很低。但是使用括号可以使得代码可读性更强，所以我们建议使用它们。</p><h2 id="多个" tabindex="-1"><a class="header-anchor" href="#多个"><span>多个 <code>?</code></span></a></h2><p>使用一系列问号 <code>?</code> 运算符可以返回一个取决于多个条件的值。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;age?&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;Hi, baby!&#39;</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;Hello!&#39;</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;Greetings!&#39;</span> <span class="token operator">:</span></span>
<span class="line">  <span class="token string">&#39;What an unusual age!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> message <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能很难一下子看出发生了什么，我们也可以使用 <code>if..else</code> 重写上面这段代码，可以帮助我们理解上面的代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&#39;Hi, baby!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>age <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&#39;Greetings!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  message <span class="token operator">=</span> <span class="token string">&#39;What an unusual age!&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看到，在这种情况下，其实可以使用三元运算符 <code>?</code> 来代替 <code>if..else</code> 语句，但是**不建议这样使用问号运算符。**这种写法比 <code>if</code> 语句要更短，但它的可读性很差，因为我们的眼睛是垂直扫描代码的，所以，跨越几行的代码更易于理解。</p><p>问号 <code>?</code> 的作用是根据条件返回其中一个值。请正确使用它。当需要执行不同代码分支时，请使用 <code>if</code>。</p>`,35)]))}const i=n(t,[["render",c],["__file","09-tiaojianfenzhi.html.vue"]]),u=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/09-tiaojianfenzhi.html","title":"条件分支：if 和 \\"?\\"","lang":"zh-CN","frontmatter":{"title":"条件分支：if 和 \\"?\\"","date":"2025-02-04 14:41"},"headers":[{"level":2,"title":"”if“ 语句","slug":"if-语句","link":"#if-语句","children":[]},{"level":2,"title":"布尔转化","slug":"布尔转化","link":"#布尔转化","children":[]},{"level":2,"title":"“else” 语句","slug":"else-语句","link":"#else-语句","children":[]},{"level":2,"title":"多个条件","slug":"多个条件","link":"#多个条件","children":[]},{"level":2,"title":"条件运算符 ?","slug":"条件运算符","link":"#条件运算符","children":[]},{"level":2,"title":"多个 ?","slug":"多个","link":"#多个","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/09-条件分支.md"}');export{i as comp,u as data};
