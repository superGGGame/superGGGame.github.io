import{_ as l,c as o,a as e,b as a,f as n,d as t,o as c,r as i}from"./app-DEZf6KcN.js";const r={},d={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence",target:"_blank",rel:"noopener noreferrer"},u={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_operators#bitwise_operators",target:"_blank",rel:"noopener noreferrer"};function k(m,s){const p=i("ExternalLinkIcon");return c(),o("div",null,[s[6]||(s[6]=e(`<h1 id="基础运算符-数学运算" tabindex="-1"><a class="header-anchor" href="#基础运算符-数学运算"><span>基础运算符，数学运算</span></a></h1><p>这一部分介绍 JS 中的运算符。</p><h2 id="术语-一元运算符-二元运算符-运算元" tabindex="-1"><a class="header-anchor" href="#术语-一元运算符-二元运算符-运算元"><span>术语：“一元运算符”，“二元运算符”，“运算元</span></a></h2><p>在开始前，我们需要了解常用的术语。</p><ul><li><strong>运算元</strong>：运算符应用的对象。比如乘法运算 <code>5 * 2</code> ，有两个运算元，左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候也会称其为参数。</li><li><strong>一元运算符</strong>：如果一个运算符（即运算符号，比如 <code>+</code>、<code>-</code>、<code>typeof</code> 这类符号均是运算符）只有一个运算元，那么它是 <strong>一元运算符</strong>。<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -1，一元负号运算符生效</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>二元运算符</strong>：同样的，如果一个运算符有两个运算元，那么它是 <strong>二元运算符</strong>。<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，二元运算符减号做减运算</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>有些运算符存在不同的使用形式，比如上面的减号，作为负号的时候是一元运算符，但是作为减号的时候是二元运算符。</li></ul><h2 id="数学运算" tabindex="-1"><a class="header-anchor" href="#数学运算"><span>数学运算</span></a></h2><p>JS 中支持以下数学运算：</p><ul><li>加法 <code>+</code>,</li><li>减法 <code>-</code>,</li><li>乘法 <code>*</code>,</li><li>除法 <code>/</code>,</li><li>取余 <code>%</code>,</li><li>求幂 <code>**</code>.</li></ul><p>前四个都很简单，而 <code>%</code> 和 <code>**</code> 值得说一说。</p><h3 id="取余" tabindex="-1"><a class="header-anchor" href="#取余"><span>取余 %</span></a></h3><p>它看起来很像百分号，但是和百分号并没有关系，他的用法如下：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">5</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，5 除以 2 的余数</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">8</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，8 除以 3 的余数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>a % b</code> 的结果是 <code>a</code> 除以 <code>b</code> 的余数。</p><h3 id="求幂" tabindex="-1"><a class="header-anchor" href="#求幂"><span>求幂 **</span></a></h3><p>求幂运算 <code>a ** b</code> 将 <code>a</code> 提升至 <code>a</code> 的 <code>b</code> 次幂。</p><p>在数学运算中我们将其表示为 $a^b$ 。</p><p>同时需要知道，就像在数学运算中一样，幂运算也适用于非整数。例如 <code>4 ** (1/2)</code> 是成立的。</p><h2 id="用二元运算符-连接字符串" tabindex="-1"><a class="header-anchor" href="#用二元运算符-连接字符串"><span>用二元运算符 <code>+</code> 连接字符串</span></a></h2><p>通常，加号 <code>+</code> 用于求和，但是如果加号被应用于字符串，它将合并 (连接) 各个字符串：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mystring</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意： 只要任何一个运算元是字符串，那么另一个运算元也将被转化为字符串。</strong></p><p>例如：<code>1 + &#39;0&#39; = &#39;10&#39;</code></p><p>同时，使用加号连接字符串的时候，他是从左向右按顺序工作的，下面是一个例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;41&quot;，不是 &quot;221&quot;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;122&quot;，不是 &quot;14&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>其他运算符连接字符串会发生什么？</strong><br> 二元 <code>+</code> 是唯一一个以这种方式支持字符串的运算符。其他算数运算符只对数字起作用，并且总是将其运算元转换为数字。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4，将 &#39;2&#39; 转换为数字</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;6&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，将两个运算元都转换为数字</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="数字转换-一元运算符" tabindex="-1"><a class="header-anchor" href="#数字转换-一元运算符"><span>数字转换，一元运算符 +</span></a></h2><p>加号 <code>+</code> 有两种形式。一种是刚刚讨论的二元形式用法，还有一种是一元运算符。</p><p>一元运算符加号，应用于单个值，对数字来说没有任何作用。但是如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。它的效果和 <code>Number(value)</code> 相同，但是更加简短。</p><p>下面给出一个有趣的例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 在二元运算符加号起作用之前，所有的值都被转化为了数字</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>apples <span class="token operator">+</span> <span class="token operator">+</span>oranges <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，<code>+</code> 号中间的空格是不可省略的。你可能会好奇为什么这么多加号会得到一个确切结果而不是令计算机感到困惑而报错，我们接下来对于符号优先级的讨论会解决这些疑问。</p><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h2><p>如果一个表达式拥有超过一个运算符，执行的顺序则由 <strong>优先级</strong> 决定。</p><p>在数学公式中，乘法优先级高于除法，括号优先级较高，这就是一些生活中常见的优先级问题，当然在 JS 中它们同样适用。</p>`,34)),a("p",null,[s[1]||(s[1]=n("具体的优先级可以参照")),a("a",d,[s[0]||(s[0]=n("优先级表")),t(p)]),s[2]||(s[2]=n("。"))]),s[7]||(s[7]=e(`<p><strong>你没有必要全部都记住，但是需要知道，一元运算符的优先级高于二元运算符。</strong> 这也是为什么上面的加号例子 <code>+apples + +oranges</code> 可以正确得到预期的结果，因为作为一元运算符的 <code>+</code> 优先级较高，所以 JS 根据优先级进行解析的时候可以正确理解我们的意图。</p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h2><p>我们知道赋值符号 <code>=</code> 也是一个运算符。它的优先级非常低，只有 <code>2</code>（参照优先级表）。</p><p>这也是为什么当我们进行赋值的时候，当所有的计算执行完毕后，赋值操作符才会将运算结果用于赋值操作。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// x = 5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>tip：它是二元运算符。</p><h2 id="赋值-返回一个值" tabindex="-1"><a class="header-anchor" href="#赋值-返回一个值"><span>赋值 = 返回一个值</span></a></h2><p><code>=</code> 本质是一个运算符，在 JavaScript 中，所有运算符都会返回一个值。这对于 <code>+</code> 和 <code>-</code> 来说是显而易见的，对于 <code>=</code> 来说也是如此。 <code>x = value</code> 将值 <code>value</code> 写入 <code>x</code> 然后返回 <strong>value</strong>。</p><p>下面是一个例子：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面这个例子我们发现，<code>(a = b + 1)</code> 的结果被用于赋值给了 a 的同时，也将结果返回给表达式作进一步的运算，这很有意思，但是请注意不要写这样的代码，<strong>这样的技巧绝对不会使得代码清晰或者可读</strong>。</p><h2 id="链式赋值-chaining-assignments" tabindex="-1"><a class="header-anchor" href="#链式赋值-chaining-assignments"><span>链式赋值（Chaining assignments）</span></a></h2><p>另一个有趣的特性是链式赋值：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 三个变量均被赋值为4</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>链式赋值从右向左计算。上面代码将 <code>2 + 2</code> 的结果赋值给三个变量。</p><p>但是出于可读性，最好将这种代码分成几行描述：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">b <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样可读性更强，尤其在快速浏览时。</p><h3 id="原地修改" tabindex="-1"><a class="header-anchor" href="#原地修改"><span>原地修改</span></a></h3><p>我们经常需要对一个变量做运算，然后将这个运算结果重新赋值给参与运算的变量：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line">n <span class="token operator">=</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用诸如 <code>+=</code>、<code>*=</code> 来简化描述：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">n <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 7（等同于 n = n + 5）</span></span>
<span class="line">n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 14（等同于 n = n * 2）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所有的算数和位运算符都有简短的“修改并赋值”运算符（关于位运算符我们会在稍后讨论）</strong>。这类运算符和赋值运算符的优先级是相同的</p><h3 id="自增-自减" tabindex="-1"><a class="header-anchor" href="#自增-自减"><span>自增/自减</span></a></h3><ul><li>自增：<code>++</code> 将变量和1相加：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 和 counter = counter + 1 效果一样，但是更简洁</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>自减：<code>--</code> 将变量和1相减：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line">counter<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token comment">// 和 counter = counter - 1 效果一样，但是更简洁</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p>⚠️ 注意： 自增/自减只能应用于变量，应用于数值（ <code>5++</code> ）则会报错。同时需要注意，自增/自减运算符在作用的同时会改变变量的实际值，不是单纯的返回值。</p></blockquote><p>运算符 <code>++</code> 和 <code>--</code> 可以置于变量前，也可以置于变量后，它们在返回值上是有差别的：</p><ul><li>当运算符置于变量前，返回值是经过运算的值（ +1 或 -1）。这称为“前置形式”，也叫做前自加（或前自减）</li><li>当运算符至于变量后，返回值是未经过运算的值。这称为“后置形式”，也叫做后自加（或后自减）</li></ul><p>在下面的例子我们可以直观的看到它们的区别：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">++</span>counter<span class="token punctuation">;</span> <span class="token comment">// (*)</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> counter<span class="token operator">--</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然如果自增自减的返回值不会被使用，那么前置后置形式基本上没有区别。</p><blockquote><p>ℹ️ 自增/自减运算符使用<br><code>++/--</code> 运算符可以在表达式内部使用。它们的优先级比绝大部分算术运算符要高。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> counter<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，因为 counter++ 返回的是“旧值”</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这样的写法会降低代码的可阅读性，在一行上做多个操作 —— 这样并不好。所以在实际编码时建议使用 “一行一个行为” 的模式</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">counter<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><p>位运算符把运算元当作 32 位整数（如果是浮点数会去除小数部分），并在它们的二进制表现形式上操作。</p><p>下面时常见的位运算符和其作用，这里只做简要介绍。<strong>位运算符总是将运算元视为二进制数字进行运算。</strong></p><ul><li>按位与（AND） <code>&amp;</code> ： <code>a &amp; b</code><ul><li>规则：两个运算元对应位进行运算得到结果，对应位均为 1 时结果对应位为 1 ，否则为 0 ；</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">5</span> $ <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 0101 &amp; 0011 -&gt; 0001 (1)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li>按位或 （OR） <code>|</code> ：<code>a &amp; b</code><ul><li>规则：两对应位至少一个为 1 结果对应位为 1 ，否则为0；</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">5</span> <span class="token operator">|</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 0101 | 0011 -&gt; 0111 (7)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li><li>按位异或（XOR）<code>^</code> ：<code>a ^ b</code><ul><li>规则：两对应位不同时结果对应位为 1 ，否则为 0；</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">5</span> <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 0101 ^ 0011 -&gt; 0110 (6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>应用：交换变量值、简单加密<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">^=</span> b<span class="token punctuation">;</span> b <span class="token operator">^=</span> a<span class="token punctuation">;</span> a <span class="token operator">^=</span> b<span class="token punctuation">;</span> <span class="token comment">// a=3, b=5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>注意，从实用角度来说，使用异或交换变量远远慢于借助临时变量的方案。</li></ul></li></ul></li><li>按位非（NOT）<code>~</code> ： <code>~a</code><ul><li>规则：反转所有位（包括符号位）</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">~</span><span class="token number">5</span><span class="token punctuation">;</span>     <span class="token comment">// ~0000...0101 → 1111...1010 (-6)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>为什么结果是 -6 呢？是因为在现代计算机中，数值保存是采用补码的，对于结果的实际值需要除了符号位取反 +1 。这里只需要认识这个操作符即可，这并不是重点内容。</li></ul></li><li>左移（Left Shift）<code>&lt;&lt;</code> ：<code>a &lt;&lt; b</code><ul><li>左移指定位数，右侧补 0 。</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token number">5</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 0101 → 1010 (10)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>对于左移运算符，可以理解为将数乘以 2 的 n 次方，n 为左移位数。</li></ul></li><li>右移（Right Shift）<code>&gt;&gt;</code> ：<code>a &gt;&gt; b</code><ul><li>右移指定位数，左侧补符号位（因此不会出现负数右移变正的问题）</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1111...1011 → 1111...1101 (-3)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>对于右移运算符，可以理解为将数除以 2 的 n 次方，n为右移位数。</li></ul></li><li>无符号右移（Zero-fill Right Shift）<code>&gt;&gt;&gt;</code><ul><li>规则：右移指定位数，左侧补 0 。</li><li>示例：<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">-</span><span class="token number">5</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1111...1011 → 0111...1101 (2147483645)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><blockquote><p>JS 是没有同或运算符的，但是可以通过其他位运算符组合来实现同或效果，具体如何实现查询相关资料即可。</p></blockquote>`,38)),a("p",null,[s[4]||(s[4]=n("位运算符更多细节的用法可以参照 MDN 上的 [位运算符](")),a("a",u,[s[3]||(s[3]=n("Expressions and operators - JavaScript | MDN")),t(p)]),s[5]||(s[5]=n(")章节"))]),s[8]||(s[8]=e(`<h2 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符"><span>逗号运算符</span></a></h2><p>逗号运算符使用较少，它能让我们处理多个表达式。</p><p>使用 <code>,</code> 将多个表达式分开的时候，每个表达式都会运行，但是只有最后一个的结果会被作为整体的结果返回。例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7（3 + 4 的结果）</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里 <code>1 + 2</code> 运行了，但是结果不会被返回，因为逗号运算符只会把最后一个表达式的结果返回。</p><blockquote><p>ℹ️ 逗号运算符的优先级非常低<br> 逗号运算符的优先级非常低，通过查询运算符优先级表格可以发现，它的优先级是 1 ，这意味着它的等级是最低的。所以上述表达式中的 <code>()</code> 是非常重要的，否则表达式不会按照我们预取执行。</p></blockquote><p>为什么我们需要这样一个运算符呢 ?</p><p>因为在一些场景中，我们需要在一行中进行执行多个行为，例如函数调用，或者是 <code>for</code> 循环的条件中：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 一行上有三个运算符</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"> <span class="token operator">...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入你的年龄&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此我们需要在这里提到逗号运算符，但是通常它不能提升代码的可读性，所以使用它需要合适的场景。</p>`,10))])}const b=l(r,[["render",k],["__file","07-jichuyunsuanfu_shuxueyunsuan.html.vue"]]),h=JSON.parse('{"path":"/series/JavaScript/01-JavaScriptjichuzhishi/07-jichuyunsuanfu_shuxueyunsuan.html","title":"基础运算符，数学运算","lang":"zh-CN","frontmatter":{"title":"基础运算符，数学运算","date":"2025-02-03 21:25"},"headers":[{"level":2,"title":"术语：“一元运算符”，“二元运算符”，“运算元","slug":"术语-一元运算符-二元运算符-运算元","link":"#术语-一元运算符-二元运算符-运算元","children":[]},{"level":2,"title":"数学运算","slug":"数学运算","link":"#数学运算","children":[{"level":3,"title":"取余 %","slug":"取余","link":"#取余","children":[]},{"level":3,"title":"求幂 **","slug":"求幂","link":"#求幂","children":[]}]},{"level":2,"title":"用二元运算符 + 连接字符串","slug":"用二元运算符-连接字符串","link":"#用二元运算符-连接字符串","children":[]},{"level":2,"title":"数字转换，一元运算符 +","slug":"数字转换-一元运算符","link":"#数字转换-一元运算符","children":[]},{"level":2,"title":"运算符优先级","slug":"运算符优先级","link":"#运算符优先级","children":[]},{"level":2,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":2,"title":"赋值 = 返回一个值","slug":"赋值-返回一个值","link":"#赋值-返回一个值","children":[]},{"level":2,"title":"链式赋值（Chaining assignments）","slug":"链式赋值-chaining-assignments","link":"#链式赋值-chaining-assignments","children":[{"level":3,"title":"原地修改","slug":"原地修改","link":"#原地修改","children":[]},{"level":3,"title":"自增/自减","slug":"自增-自减","link":"#自增-自减","children":[]}]},{"level":2,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":2,"title":"逗号运算符","slug":"逗号运算符","link":"#逗号运算符","children":[]}],"git":{},"filePathRelative":"series/JavaScript/01-JavaScript基础知识/07-基础运算符_数学运算.md"}');export{b as comp,h as data};
